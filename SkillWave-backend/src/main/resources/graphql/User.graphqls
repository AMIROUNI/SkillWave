type Query {
    users: [User]
    userById(id: ID!): User
    getProjectById(id: ID!): Project
    getAllProjects: [Project]
}

type Mutation {
    signUp(name: String!, email: String!, password: String!): User!
    signIn(email: String!, password: String!): User
    updateUser(id: ID!, name: String, email: String, phone: String, bio: String): User
    deleteUser(id: ID!): Boolean

    addProject(
        title: String!,
        description: String!,
        clientId: ID!,
        budget: Float,
        duration: String,
        deadline: String,
        postedAt: String,
        status: String,
        requiredSkills: [String]
    ): Project

    updateProject(
        id: ID!,
        title: String,
        description: String,
        budget: Float,
        duration: String,
        deadline: String,
        status: String,
        requiredSkills: [String]
    ): Project

    deleteProject(id: ID!): Boolean
}

type User {
    id: ID!
    name: String
    fullName: String
    email: String
    password: String
    avatarUrl: String
    phone: String
    role: String
    bio: String
}
type Project {
    id: ID!
    title: String
    description: String
    client: User
    budget: Float
    duration: String
    deadline: String
    postedAt: String
    status: String
    requiredSkills: [String]
}
# --- Lesson Types and Queries ---
type Lesson {
  id: ID!
  title: String!
  content: String!
  videoUrl: String
  lessonOrder: Int
  course: Course
}

type Query {
  getLessonById(id: ID!): Lesson
  getAllLessons: [Lesson]
}

type Mutation {
  addLesson(
    title: String!
    content: String!
    videoUrl: String
    lessonOrder: Int
    courseId: ID!
  ): Lesson

  updateLesson(
    id: ID!
    title: String!
    content: String!
    videoUrl: String
    lessonOrder: Int
    courseId: ID!
  ): Lesson

  deleteLesson(id: ID!): Boolean
}


enum ContractStatus {
  ACTIVE
  COMPLETED
  TERMINATED
}

type Contract {
  id: ID!
  project: Project
  freelancer: User
  agreedAmount: Float
  startDate: String
  endDate: String
  status: ContractStatus
  milestones: [Milestone]
}

type Query {
  getAllContracts: [Contract]
  getContractById(id: ID!): Contract
  getContractsByFreelancerId(freelancerId: ID!): [Contract]
  getContractsByClientId(clientId: ID!): [Contract]
  getContractsByStatus(status: ContractStatus!): [Contract]
  getContractByProjectId(projectId: ID!): Contract
}

type Mutation {
  createContract(projectId: ID!, freelancerId: ID!, agreedAmount: Float!): Contract
  updateContract(id: ID!, agreedAmount: Float, endDate: String, status: ContractStatus): Contract
  deleteContract(id: ID!): Boolean
}





enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
}

type Bid {
  id: ID!
  project: Project
  freelancer: User
  amount: Float
  proposal: String
  submittedAt: String
  deliveryDays: Int
  status: BidStatus
}

type Query {
  getAllBids: [Bid]
  getBidById(id: ID!): Bid
  getBidsByProjectId(projectId: ID!): [Bid]
  getBidsByFreelancerId(freelancerId: ID!): [Bid]
  getBidsByStatus(status: BidStatus!): [Bid]
  hasFreelancerBid(projectId: ID!, freelancerId: ID!): Boolean
}

type Mutation {
  createBid(
    projectId: ID!
    freelancerId: ID!
    amount: Float!
    proposal: String!
    deliveryDays: Int!
  ): Bid

  updateBid(
    id: ID!
    amount: Float
    proposal: String
    deliveryDays: Int
    status: BidStatus
  ): Bid

  deleteBid(id: ID!): Boolean
}




type Course {
  id: ID!
  title: String
  description: String
  imageUrl: String
  price: Float
  category: String
  instructor: User
  createdAt: String
  updatedAt: String
}

type Query {
  getAllCourses: [Course]
  getCourseById(id: ID!): Course
}

type Mutation {
  createCourse(
    title: String!
    description: String!
    imageUrl: String
    price: Float!
    category: String!
    instructorId: ID!
  ): Course

  updateCourse(
    id: ID!
    title: String
    description: String
    imageUrl: String
    price: Float
    category: String
    instructorId: ID
  ): Course

  deleteCourse(id: ID!): Boolean
}





type Enrollment {
  id: ID!
  course: Course
  student: User
  enrolledAt: String
}

type Query {
  getAllEnrollments: [Enrollment]
  getEnrollmentById(id: ID!): Enrollment
}

type Mutation {
  createEnrollment(courseId: ID!, studentId: ID!): Enrollment
  deleteEnrollment(id: ID!): Boolean
}
